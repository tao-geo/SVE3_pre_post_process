Running CitcomSVE 3.0 with preprocess and postprocess scripts.

Here the example case is `input_ice.test`: resolution is 48x80x80, use 96 cpus.

Some sample results can be found in results_samples.zip.

Some data generated by pre-/post-processes can be also found in the following folders (all zipped).


# I. Step 1: do preprocess in ./preprocess_initial/

Goal: Generate ocean functions and "grounded ice load (plus topo correction, see Yuan 2024, in review or Kendall 2005)" based on user's ice model and the present-day topography.

## I.1 Required files

- original ice model files: User-provided ice model files, should be on CitcomSVE input grid. (e.g. ICE6G_original in this case)
- topo file: the present day topography model, also on CitcomSVE input grid. (e.g. ETOPO1+bedmap2_180x360.txt)

in this particular case, the ICE6G_original/ice* files are generated from file `IceT.I6F_C.131QB_VM5a_1deg.nc` by using ./gen_ascii_from_nc.sh (a bash script).

## I.2 steps

- run make to compile precalc_oceanfunc.c
- prepare `preprocess.input` file, the input file for precalc_oceanfunc. See notes in it.
- run `run.sh`.


# II. Step 2: run CitcomSVE using ice and ocean files generated from Step 1.

run CitcomSVE with `input_ice.test`.



# III. Step 3: postprocess, cumulative displacement and geoid and their rate on regular grids, and RSL for sites

in postprocess directory.

1. run `make` to compile files.
2. modify and run `bash run_all_postp.sh`. See notes in run_all_postp.sh for parameters.


# IV. (optional) Step 4: refine ocean function (and grounded ice load)

See Yuan 2024, in review or Kendall 2005 for details.

(use with caution, this has not benchmarked carefully, although some simple comparison looks fine.)

Similar to Step 1,
1. run  `make` to compile files
2. modify `refine_oceanfunc.input` and `run_all.sh`, run run_all.sh with bash , see notes in both files for details.
